============================
hbsp (Hesperus BSP Compiler)
============================

-----
Usage
-----

hbsp {-r|-c} <input filename> <output filename> [-w<number>]

Flags:

-r		The input file contains rendering geometry (a list of polygons with
		textures).

-c		The input file contains collision geometry (a list of polygons with
		flags indicating whether or not each polygon is to be used when
		constructing navigation meshes).

-w		The ratio between the weights assigned to balance and split when
		choosing a split plane at each internal node: the default ratio is 4:1
		in favour of splits, and equivalent to specifying -w4. Note that it
		is perfectly valid to use decimal ratios, e.g. -w2.5 is fine.

Example Usage:

hbsp -r input.rgm output.rbt -w8

This inputs a file input.rgm containing rendering geometry and outputs a file
output.rbt containing a rendering BSP tree. The BSP construction process will
weight splits as 8 times more important than balance.

In this instance, the filenames are arbitrary, but .rgm and .rbt were chosen to
indicate "Rendering GeoMetry" and "Rendering BSP Tree" respectively.

-----
Input
-----

If the input file is specified to contain rendering geometry, it will be in the
form of a series of lines, each representing a single polygon and being of the
following form:

<n = vertex count> ( x1 y1 z1 u1 v1 ) ... ( xn yn zn un vn ) <texture>

If the input file is instead specified to contain collision geometry, each line
will instead be of the form:

<n = vertex count> ( x1 y1 z1 ) ... ( xn yn zn ) <navigation flag (0 or 1)>

------
Output
------

The output will be a BSP tree which has a split plane at each internal node,
and a list of polygons in each leaf. In practice, the output file will use
indexed polygons.

The output file will be structured as follows:

<p = polygon count>
<polygon 0>
<polygon p-1>
***
<n = BSP tree node count>
<node 0>
...
<node n-1>

If the input was rendering geometry, output polygons are stored as:

<i = index> <k = vertcount> ( xi1 yi1 zi1 ui1 vi1 ) ... ( xik yik zik uik vik ) <texture>

If the input was collision geometry, they are instead stored as:

<i = index> <k = vertcount> ( xi1 yi1 zi1 ) ... ( xik yik zik ) <navigation flag>

There are three types of nodes in the tree: branch nodes, empty leaf nodes, and
solid leaf nodes.

Branch nodes are stored as:

<index> B <left> <right> <parent> <split plane = ( a b c d )>

Empty leaves are stored as:

<index> E <parent> <m = leaf polygon count> [ <poly_1> ... <poly_m> ]

Solid leaves are stored as:

<index> S <parent>
